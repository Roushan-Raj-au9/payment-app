1. npx create-turbo@latest

2. in apps folder we have two folder name docs & web ,  here we deleted the docs folder and renamed the web folder to user-apps

3. go into user-app folder and run below two commands

4. npm install -D tailwindcss postcss autoprefixer

5. npx tailwindcss init -p  and add few things inside content array as below
content: [
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "../../packages/ui/**/*.{js,ts,jsx,tsx,mdx}"
  ],

6. delete all the content in global.css that is inside user-app in app folder and replace with below one
@tailwind base;
@tailwind components;
@tailwind utilities;


7. create a folder named "db" inside packages folder

8. npm init -y

9. tsc.cmd --init (for windows, for mac npx tsc --init)

10. edit name in package.json like --  "name": "@repo/db"

11. copy the tsconfig.json from UI folder and paste it in DB tsconfig.json

12. and edit the extends line like:- "extends": "@repo/typescript-config/base.json",

13. npx prisma init  (do this after navigating to folder db)

14. create model as per requirements

15. paste your postgres live url in .env that is inside DB folder or run postgress in docker and paste the url of local
-->  docker run -e POSTGRES_PASSWORD=mysecretpassword -d -p 5432:5432 postgres
---> postgresql://postgres:mysecretpassword@localhost:5432/postgres
                 (username)  (password)                    (dbname)


16. npx prisma migrate dev --name init     (this will create tables in database according to the models that we have created in schema.prisma)
                                  (name of migration)

17. npx prisma generate   (this will create prisma client so that we can use methods according to model, it is created inside node modules )
--->import { PrismaClient } from '@prisma/client'  (like this we can now import & use)
--->const prisma = new PrismaClient()

18. inside DB folder create a file named "index.ts" & write --> export * from "@prisma/client";

19. add a export section in package.json of DB
"exports": {
  "./client": "./index.ts"
}

20. now go to root folder that is pay-app and run ---> npm install

21. go inside apps/user-app folder and inside package.json in dependencies add this line also -->  "@repo/db": "*"

22. now again go to root folder that is pay-app and run ---> npm install

23. go to packages folder and and create new folder named store for recoil (state management)

24. now go to store folder and run ---> npm init -y

25. in same folder run ---> tsc.cmd --init  (for windows, for mac ---> npx tsc --init)

26. in same folder run ---> npm i recoil

27. same folder replace content of -- tsconfig.json with below one
{
    "extends": "@repo/typescript-config/react-library.json",
    "compilerOptions": {
      "outDir": "dist"
    },
    "include": ["src"],
    "exclude": ["node_modules", "dist"]
}

28. same folder update the name that is inside package.json --> "name": "@repo/store",

29. same folder create a new folder named "src" inside that "atoms" and then a file named "balance.ts"
import { atom } from "recoil";

export const balanceAtom = atom<number>({
    key: "balance",
    default: 0,
})

30. same folder create a new folder named "hooks" and inside that a new file named "useBalance.ts"
import { useRecoilValue } from "recoil"
import { balanceAtom } from "../atoms/balance"

export const useBalance = () => {
    const value = useRecoilValue(balanceAtom);
    return value;
}   

31. same folder go to package.json and add "exports" section 
"exports": {
  "./useBalance": "./src/hooks/useBalance"
}

32. go to user-app folder and inside that create a file named "provider.tsx" and put content
"use client"
import { RecoilRoot } from "recoil";

export const Providers = ({children}: {children: React.ReactNode}) => {
    return <RecoilRoot>
            {children}
    </RecoilRoot>
}

33. in same folder go inside "app" folder and update "layout.tsx" file
  <Providers>
    <body className={inter.className}>{children}</body>
  </Providers>

34. to check atom is working or not you can go to "apps/user-app/app/page.tsx" and import the hook here but keep in mind to use the keyword at top ---> "use client"
  
"use client";

import { useBalance } from "@repo/store/useBalance";

export default function Page(): JSX.Element {
  const balance = useBalance();

  return (
    <div className="text-2xl">
      Hi there {balance}
    </div>
  );
}

35. go to "packages" folder inside "DB" and upadte "schema.prisma"
model User {
  id          Int      @id @default(autoincrement())
  email       String?  @unique
  name        String? 
  number      String  @unique
  password    String
}

model Merchant {
  id          Int     @id @default(autoincrement())
  email       String  @unique
  name        String?
  auth_type   AuthType   
}

enum AuthType {
  Google
  Github
}

36. Go to "apps/user-app" and run ---> npm install next-auth

37. Go to "apps/user-app/app" and create a new folder named "lib" and inside that a file named "auth.ts" and write the auth logic there

38. Go to "apps/user-app/app" and create a new folder named "api" and inside that create a new folder named "auth/[...nextauth]" and inside that a file named "route.ts"

import NextAuth from "next-auth";
import { authOptions } from "../../../lib/auth"

const handler = NextAuth(authOptions)

export { handler as GET, handler as POST }

39. Go to "apps/user-app/provider.tsx" and Wrap the apps around SessionProvider context from the next-auth package

"use client"
import { RecoilRoot } from "recoil";
import { SessionProvider } from "next-auth/react";

export const Providers = ({children}: {children: React.ReactNode}) => {
    return <RecoilRoot>
        <SessionProvider>
            {children}
        </SessionProvider>
    </RecoilRoot>
}

40.

